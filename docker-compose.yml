version: "3.9"

services:
  mysql:
    image: mysql:8.0
    container_name: airbnb_mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: airbnb_analytics
      MYSQL_USER: airbnb_user
      MYSQL_PASSWORD: airbnb_pass
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./sql/init:/docker-entrypoint-initdb.d
    networks:
      - airbnb_network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "airbnb_user", "-pairbnb_pass"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mongo1:
    image: mongo:6.0
    container_name: mongo1
    hostname: mongo1
    ports:
      - "27017:27017"
    command: mongod --replSet rs0 --bind_ip_all
    volumes:
      - mongo1_data:/data/db
    networks:
      - airbnb_network
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'db.runCommand({ ping: 1 }).ok' | mongosh --quiet"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s

  mongo2:
    image: mongo:6.0
    container_name: mongo2
    hostname: mongo2
    ports:
      - "27018:27017"
    command: mongod --replSet rs0 --bind_ip_all
    volumes:
      - mongo2_data:/data/db
    networks:
      - airbnb_network
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'db.runCommand({ ping: 1 }).ok' | mongosh --quiet"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s

  mongo3:
    image: mongo:6.0
    container_name: mongo3
    hostname: mongo3
    ports:
      - "27019:27017"
    command: mongod --replSet rs0 --bind_ip_all
    volumes:
      - mongo3_data:/data/db
    networks:
      - airbnb_network
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'db.runCommand({ ping: 1 }).ok' | mongosh --quiet"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s

  # MongoDB Initialization Service - Runs once to set up replica set and data
  mongo_init:
    image: mongo:6.0
    container_name: mongo_init
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy
    networks:
      - airbnb_network
    volumes:
      - ./mongo/init:/init
    entrypoint: [ "/bin/bash", "-c" ]
    command: >
      "
      echo 'Waiting for all nodes...' &&
      until mongosh --host mongo1 --eval 'db.runCommand({ ping: 1 })' --quiet; do sleep 2; done &&
      until mongosh --host mongo2 --eval 'db.runCommand({ ping: 1 })' --quiet; do sleep 2; done &&
      until mongosh --host mongo3 --eval 'db.runCommand({ ping: 1 })' --quiet; do sleep 2; done &&
      echo 'All nodes up. Running init script.' &&
      mongosh --host mongo1 /init/init.js
      "
    restart: "no"

  mongo_express:
    image: mongo-express:latest
    container_name: airbnb_mongo_express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ENABLE_ADMIN: true
      ME_CONFIG_MONGODB_SERVER: mongo1
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH: false
    networks:
      - airbnb_network
    depends_on:
      mongo1:
        condition: service_healthy

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: airbnb_phpmyadmin
    restart: always
    ports:
      - "8080:80"
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: airbnb_user
      PMA_PASSWORD: airbnb_pass
    networks:
      - airbnb_network
    depends_on:
      mysql:
        condition: service_healthy

volumes:
  mysql_data:
  mongo1_data:
  mongo2_data:
  mongo3_data:

networks:
  airbnb_network:
    driver: bridge
